name: Deploy to Firebase Hosting

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Firebase Tools
        run: npm install -g firebase-tools

      - name: Debug:show repo tree (short)
        run: |
          echo "PWD: $(pwd)"
          echo "=== root list ==="
          ls -la
          echo "=== show public folder (if exists) ==="
          if [ -d public ]; then ls -la public || true; else echo "no public folder"; fi

      - name: Setup Firebase credentials file (from secrets)
        shell: bash
        run: |
          set -euo pipefail
          F="${{ github.workspace }}/firebase-service-account.json"
          echo "Writing service account to $F ..."
          # Prefer base64 secret if provided
          if [ -n "${{ secrets.FIREBASE_SERVICE_ACCOUNT_B64 }}" ]; then
            printf '%s' "${{ secrets.FIREBASE_SERVICE_ACCOUNT_B64 }}" | base64 --decode > "$F" || { echo "ERROR: base64 --decode failed"; exit 2; }
          elif [ -n "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            # Direct JSON secret (raw multiline JSON)
            printf '%s' "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > "$F"
          else
            echo "ERROR: No firebase service account secret found. Add FIREBASE_SERVICE_ACCOUNT_B64 or FIREBASE_SERVICE_ACCOUNT to repository secrets." >&2
            exit 1
          fi
          chmod 600 "$F"
          echo "WROTE_FILE: $F"
          ls -l "$F"
          echo -n "size(bytes): "; wc -c < "$F" || true

      - name: Validate service account (safe check:byte length + client_email)
        shell: bash
        run: |
          set -euo pipefail
          P="${{ github.workspace }}/firebase-service-account.json"
          echo "Inspecting $P (will not print private_key)..."
          python3 - <<PY
import os, json, sys
p = os.path.join(os.environ.get("GITHUB_WORKSPACE","."),"firebase-service-account.json")
b = open(p,'rb').read()
print("byte_length:", len(b))
try:
    obj = json.loads(b.decode('utf-8'))
    print("JSON_VALID: true")
    print("client_email:", obj.get("client_email","(none)"))
except Exception as e:
    print("JSON_VALID: false")
    print("JSON_ERROR:", str(e))
    sys.exit(3)
PY

      - name: Find firebase.json path (set FIREBASE_CONFIG_PATH)
        shell: bash
        run: |
          set -euo pipefail
          # search up to depth 6 for firebase.json
          CFG=$(find . -maxdepth 6 -name firebase.json -print -quit || true)
          if [ -z "$CFG" ]; then
            echo "No firebase.json found in repository (searched up to depth 6)." >&2
            # leave FIREBASE_CONFIG_PATH empty so deploy step fails with clear message
            echo "FIREBASE_CONFIG_PATH=" >> $GITHUB_ENV
          else
            echo "Found firebase.json at: $CFG"
            echo "FIREBASE_CONFIG_PATH=$CFG" >> $GITHUB_ENV
          fi
          echo "You can edit repo or specify different config if needed."

      - name: Debug: show found config path
        run: |
          echo "FIREBASE_CONFIG_PATH: $FIREBASE_CONFIG_PATH"
          if [ -n "$FIREBASE_CONFIG_PATH" ]; then
            echo "firebase.json content (first 200 chars):"
            head -c200 "$FIREBASE_CONFIG_PATH" | sed -e 's/[^[:print:]\t]/./g' || true
          fi

      - name: Deploy to Firebase Hosting (using firebase-tools)
        shell: bash
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/firebase-service-account.json
        run: |
          set -euo pipefail
          if [ -z "${FIREBASE_CONFIG_PATH:-}" ]; then
            echo "ERROR: FIREBASE_CONFIG_PATH is empty. firebase.json not found. Please add firebase.json to the repo or set it in the workflow." >&2
            exit 1
          fi
          echo "Using firebase config: $FIREBASE_CONFIG_PATH"
          echo "Deploying to Firebase project: padakpadak-d5725 ..."
          # show firebase-tools version
          npx firebase-tools --version
          # Deploy specifying config file path explicitly
          npx firebase-tools deploy --only hosting --project padakpadak-d5725 --config "$FIREBASE_CONFIG_PATH" --non-interactive

      - name: Post-deploy: show hosting URL hint
        if: success()
        run: |
          echo "If deploy succeeded, your hosting site is usually at https://<YOUR_PROJECT_ID>.web.app or at GitHub Pages URL if using Pages."
          echo "Check Firebase Console -> Hosting to confirm live URL."
